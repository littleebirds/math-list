{"version":3,"sources":["data/qrcode.jpg","serviceWorker.js","List1/index.js","List2/index.js","KnowledgeList/index.js","router.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Item","App","itemOnClick","bind","id","className","list1","map","chapter","index","Fragment","key","name","children","item","arrow","onClick","React","Component","KnowledgeList","Router","mode","path","component","List1","List2","alt","src","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,oC,mFCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2HCbAC,G,OAAO,IAAKA,MAwCHC,E,YAtCb,aAAc,IAAD,8BACX,+CACKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFR,E,yEAIDC,M,+BAIH,IAAD,OAEN,OAEI,yBAAKC,UAAU,WAEXC,IAAMC,KAAI,SAACC,EAAQC,GAAT,OACR,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACnB,yBAAKJ,UAAU,eACZG,EAAQI,MAEX,2BAEEJ,EAAQK,SAASN,KAAI,SAACO,EAAKL,GAAN,OACrB,kBAACT,EAAD,CACEW,IAAKF,EACLM,MAAM,aACNC,QAAS,kBAAI,EAAKd,YAAYY,EAAKV,MACnCU,EAAKF,mB,GA3BPK,IAAMC,WCDlBlB,G,OAAO,IAAKA,MAwCHC,E,YAtCb,aAAc,IAAD,8BACX,+CACKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFR,E,yEAIDC,M,+BAIH,IAAD,OAEN,OAEI,yBAAKC,UAAU,WAEXC,IAAMC,KAAI,SAACC,EAAQC,GAAT,OACR,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACnB,yBAAKJ,UAAU,eACZG,EAAQI,MAEX,2BAEEJ,EAAQK,SAASN,KAAI,SAACO,EAAKL,GAAN,OACrB,kBAAC,EAAD,CACEE,IAAKF,EACLM,MAAM,aACNC,QAAS,kBAAI,EAAKd,YAAYY,EAAKV,MACnCU,EAAKF,mB,GA3BPK,IAAMC,WCOTC,G,wLARP,OACI,0C,GAHgBF,IAAMC,YCgCnBE,MA5Bf,WAEI,OACI,6BACI,uBACIC,KAAK,QAJE,oDAQX,kBAAC,IAAD,KACA,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,iBAAiBC,UAAWJ,MAGhD,yBAAKd,UAAU,UACb,yBAAKA,UAAU,UACf,yBAAKqB,IAAI,SAASC,IAAKC,EAAQ,QAE/B,yBAAKvB,UAAU,cAAf,8DCtBVwB,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SL6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0f9588cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/qrcode.36843899.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { List } from 'antd-mobile';\r\nimport { list1 } from '../data/list.json';\r\nimport \"./index.css\";\r\n\r\nconst Item = List.Item; \r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.itemOnClick = this.itemOnClick.bind(this);\r\n  }\r\n  itemOnClick(id){\r\n    // const filterKnowledgeList = knowledgeList.filter((item)=>item.id.slice(0,2)===id);\r\n    // console.log(filterKnowledgeList)\r\n  }\r\n  render(){\r\n\r\n    return (\r\n\r\n        <div className=\"content\">\r\n          {\r\n            list1.map((chapter,index)=>(\r\n              <React.Fragment key={index}>\r\n                <div className=\"chapterName\">\r\n                  {chapter.name}\r\n                </div>\r\n                <List>\r\n                {\r\n                  chapter.children.map((item,index)=>(\r\n                  <Item\r\n                    key={index}\r\n                    arrow='horizontal'\r\n                    onClick={()=>this.itemOnClick(item.id)}\r\n                  >{item.name}</Item>\r\n                  ))\r\n                }\r\n                </List>\r\n              </React.Fragment>\r\n            ))\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { List } from 'antd-mobile';\r\nimport \"./index.css\";\r\nimport { list1 } from '../data/list.json';\r\n\r\nconst Item = List.Item; \r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.itemOnClick = this.itemOnClick.bind(this);\r\n  }\r\n  itemOnClick(id){\r\n    // const filterKnowledgeList = knowledgeList.filter((item)=>item.id.slice(0,2)===id);\r\n    // console.log(filterKnowledgeList)\r\n  }\r\n  render(){\r\n\r\n    return (\r\n\r\n        <div className=\"content\">\r\n          {\r\n            list1.map((chapter,index)=>(\r\n              <React.Fragment key={index}>\r\n                <div className=\"chapterName\">\r\n                  {chapter.name}\r\n                </div>\r\n                <List>\r\n                {\r\n                  chapter.children.map((item,index)=>(\r\n                  <Item\r\n                    key={index}\r\n                    arrow='horizontal'\r\n                    onClick={()=>this.itemOnClick(item.id)}\r\n                  >{item.name}</Item>\r\n                  ))\r\n                }\r\n                </List>\r\n              </React.Fragment>\r\n            ))\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nclass KnowledgeList extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                lllll\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default KnowledgeList;","import React from 'react';\r\nimport { NavBar } from 'antd-mobile';\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\r\nimport List1 from './List1';\r\nimport List2 from './List2';\r\nimport KnowledgeList from './KnowledgeList';\r\n\r\nfunction Router(){\r\n    const navbarName = '数学思维的教与学';\r\n    return(\r\n        <div>\r\n            <NavBar\r\n                mode=\"dark\"\r\n                >\r\n            {navbarName}\r\n            </NavBar>\r\n            <BrowserRouter>\r\n            <Switch>\r\n                {/* <Route path='/' component={List1}></Route> */}\r\n                <Route path=\"/list1\" component={List1}></Route>\r\n                <Route path=\"/list2\" component={List2}></Route>\r\n                <Route path=\"/knowledgelist\" component={KnowledgeList}></Route>\r\n            </Switch>\r\n            </BrowserRouter>\r\n        <div className=\"footer\">\r\n          <div className='qrcode'>\r\n          <img alt='qrcode' src={require('./data/qrcode.jpg')}></img>\r\n          </div>\r\n          <div className='qrcodeText'>详情推荐关注公众号!</div>\r\n        </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './router';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}